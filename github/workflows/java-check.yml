name: Java Code Compilation Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.java'

jobs:
  compile-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [11, 17]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle
    
    - name: Find and compile Java files
      run: |
        echo "üîç Finding Java files..."
        find . -name "*.java" -not -path "./.git/*" | head -10
        
        echo "üìä Java file statistics:"
        find . -name "*.java" -not -path "./.git/*" | wc -l
        
        echo "üèóÔ∏è Compiling Java files by directory..."
        
        # Compile files in each directory separately to handle package structures
        for dir in */; do
          if [ -d "$dir" ] && [ "$dir" != ".git/" ] && [ "$dir" != ".github/" ]; then
            echo "üìÅ Compiling in directory: $dir"
            cd "$dir"
            
            # Find Java files in current directory
            java_files=$(find . -maxdepth 1 -name "*.java" 2>/dev/null | wc -l)
            
            if [ $java_files -gt 0 ]; then
              echo "   Found $java_files Java files"
              
              # Try to compile each Java file
              for java_file in *.java; do
                if [ -f "$java_file" ]; then
                  echo "   üî® Compiling: $java_file"
                  if javac "$java_file" 2>/dev/null; then
                    echo "   ‚úÖ Successfully compiled: $java_file"
                  else
                    echo "   ‚ö†Ô∏è  Compilation warning/error in: $java_file (this might be expected for some files)"
                  fi
                fi
              done
              
              # Clean up compiled files
              rm -f *.class
            else
              echo "   No Java files found in $dir"
            fi
            
            cd ..
          fi
        done
    
    - name: Check for common issues
      run: |
        echo "üîç Checking for common code issues..."
        
        # Check for files with potential encoding issues
        echo "üìù Checking file encodings..."
        find . -name "*.java" -exec file {} \; | grep -v ASCII | grep -v UTF-8 | head -5
        
        # Check for very long lines that might cause issues
        echo "üìè Checking for very long lines (>200 chars)..."
        find . -name "*.java" -exec awk 'length($0) > 200 {print FILENAME ":" NR ": Line too long (" length($0) " chars)"}' {} \; | head -5
        
        # Check for potential package/import issues
        echo "üì¶ Checking package declarations..."
        find . -name "*.java" -exec grep -H "^package " {} \; | head -10
    
    - name: Repository Statistics
      run: |
        echo "üìä Repository Statistics:"
        echo "Java files: $(find . -name '*.java' | wc -l)"
        echo "Directories: $(find . -type d -not -path './.git*' | wc -l)"
        echo "PDF files: $(find . -name '*.pdf' | wc -l)"
        echo "Total files: $(find . -type f -not -path './.git*' | wc -l)"
        
        echo ""
        echo "üìÅ Directory structure:"
        find . -type d -not -path './.git*' | head -20
        
        echo ""
        echo "üèÜ Largest directories by Java file count:"
        find . -name "*.java" -not -path './.git*' | sed 's|/[^/]*$||' | sort | uniq -c | sort -rn | head -10

  code-quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Check code quality metrics
      run: |
        echo "üéØ Code Quality Analysis"
        
        # Count lines of code
        echo "üìè Lines of code analysis:"
        total_lines=$(find . -name "*.java" -not -path './.git*' -exec cat {} \; | wc -l)
        echo "Total lines of Java code: $total_lines"
        
        # Find files with TODO/FIXME comments
        echo "üìù TODO/FIXME analysis:"
        todo_count=$(find . -name "*.java" -not -path './.git*' -exec grep -l "TODO\|FIXME" {} \; 2>/dev/null | wc -l)
        echo "Files with TODO/FIXME: $todo_count"
        
        # Check for proper documentation
        echo "üìö Documentation analysis:"
        documented_files=$(find . -name "*.java" -not -path './.git*' -exec grep -l "/\*\*" {} \; 2>/dev/null | wc -l)
        echo "Files with JavaDoc comments: $documented_files"
        
        # Find LeetCode solutions
        echo "üß© LeetCode solutions:"
        leetcode_files=$(find . -name "leetCodeQ*.java" | wc -l)
        echo "LeetCode solution files: $leetcode_files"

  # Only run on pull requests
  pr-analysis:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch full history for comparison
    
    - name: Analyze PR changes
      run: |
        echo "üîÑ Pull Request Analysis"
        
        # Get the base branch
        base_branch="${{ github.base_ref }}"
        echo "Base branch: $base_branch"
        
        # Count changed Java files
        changed_java_files=$(git diff --name-only origin/$base_branch...HEAD | grep "\.java$" | wc -l)
        echo "Changed Java files: $changed_java_files"
        
        # List changed files
        if [ $changed_java_files -gt 0 ]; then
          echo "üìÅ Changed Java files:"
          git diff --name-only origin/$base_branch...HEAD | grep "\.java$" | head -10
        fi
        
        # Check for new LeetCode solutions
        new_leetcode=$(git diff --name-only origin/$base_branch...HEAD | grep "leetCodeQ.*\.java$" | wc -l)
        if [ $new_leetcode -gt 0 ]; then
          echo "üß© New LeetCode solutions added: $new_leetcode"
          git diff --name-only origin/$base_branch...HEAD | grep "leetCodeQ.*\.java$"
        fi